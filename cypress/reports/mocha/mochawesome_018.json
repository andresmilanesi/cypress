{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-04T03:46:40.436Z",
    "end": "2020-04-04T03:46:44.658Z",
    "duration": 4222,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e3bb72c8-8173-426c-95e2-ada60a9e94d8",
      "title": "",
      "fullFile": "cypress/integration/examples/utilities.spec.js",
      "file": "cypress/integration/examples/utilities.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 885,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(function (response) {\n  var ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "206601c6-01eb-4826-a528-2aefc9560b94",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nvar $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "b8acbdd9-30a7-482f-bf96-d3af7b8577b8",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then(function ($div) {\n  return (// https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n    // get the dataUrl string for the javascript-logo\n    Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(function (dataUrl) {\n      // create an <img> element and set its src to the dataUrl\n      var img = Cypress.$('<img />', {\n        src: dataUrl\n      }); // need to explicitly return cy here since we are initially returning\n      // the Cypress.Blob.imgSrcToDataURL promise to our test\n      // append the image\n      $div.append(img);\n      cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n    })\n  );\n});",
              "err": {},
              "uuid": "1cfce3a0-bc3f-4b02-aa62-f991b4b0a75b",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nvar matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be[\"true\"];\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be[\"false\"]; // ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be[\"true\"]; // whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be[\"false\"];",
              "err": {},
              "uuid": "dfe3a8f9-9084-43a3-a589-3d988eb7ce87",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.moment() - format or parse dates using a moment method",
              "fullTitle": "Utilities Cypress.moment() - format or parse dates using a moment method",
              "timedOut": null,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/moment\nvar time = Cypress.moment('2014-04-25T19:38:53.196Z').utc().format('h:mm A');\nexpect(time).to.be.a('string');\ncy.get('.utility-moment').contains('3:38 PM').should('have.class', 'badge'); // the time in the element should be between 3pm and 5pm\nvar start = Cypress.moment('3:00 PM', 'LT');\nvar end = Cypress.moment('5:00 PM', 'LT');\ncy.get('.utility-moment .badge').should(function ($el) {\n  // parse American time like \"3:38 PM\"\n  var m = Cypress.moment($el.text().trim(), 'LT'); // display hours + minutes + AM|PM\n  var f = 'h:mm A';\n  expect(m.isBetween(start, end), \"\".concat(m.format(f), \" should be between \").concat(start.format(f), \" and \").concat(end.format(f))).to.be[\"true\"];\n});",
              "err": {},
              "uuid": "7f61b619-d785-40c2-aef3-93f933539703",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nvar waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  // @ts-ignore TS2351 (new Cypress.Promise)\n  return new Cypress.Promise(function (resolve, reject) {\n    setTimeout(function () {\n      // set waited to true\n      waited = true; // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(function () {\n  return (// return a promise to cy.then() that\n    // is awaited until it resolves\n    // @ts-ignore TS7006\n    waitOneSecond().then(function (str) {\n      expect(str).to.eq('foo');\n      expect(waited).to.be[\"true\"];\n    })\n  );\n});",
              "err": {},
              "uuid": "88b6a0af-f950-4cb7-a1d8-c580d2e3c6b4",
              "parentUUID": "ac8ac1c6-8eb1-4d43-a45f-e07cd893d999",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "206601c6-01eb-4826-a528-2aefc9560b94",
            "b8acbdd9-30a7-482f-bf96-d3af7b8577b8",
            "1cfce3a0-bc3f-4b02-aa62-f991b4b0a75b",
            "dfe3a8f9-9084-43a3-a589-3d988eb7ce87",
            "7f61b619-d785-40c2-aef3-93f933539703",
            "88b6a0af-f950-4cb7-a1d8-c580d2e3c6b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3176,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.1.0"
    }
  }
}